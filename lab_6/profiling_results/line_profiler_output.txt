Timer unit: 1e-07 s

Total time: 0.000755 s
File: c:\Users\micra\OneDrive\Рабочий стол\test\main.py
Function: frequency_bitwise_test at line 30

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    30                                           def frequency_bitwise_test(sequence: str) -> float:
    31                                               """
    32                                               Performs a frequency bitwise test.
    33                                           
    34                                               Parameters: 
    35                                               The binary sequence to test.
    36                                           
    37                                               Returns: 
    38                                               The P-value calculated by the statistical test.
    39                                               """
    40         2         29.0     14.5      0.4      try:
    41         2         42.0     21.0      0.6          N = len(sequence)
    42         2         25.0     12.5      0.3          sum = 0
    43       258       2402.0      9.3     31.8          for bit in sequence:
    44       256       2079.0      8.1     27.5              if bit == "0":
    45       136       1217.0      8.9     16.1                  sum -= 1
    46                                                       else:
    47       120       1052.0      8.8     13.9                  sum += 1
    48         2        119.0     59.5      1.6          S_N = (1.0 / math.sqrt(N)) * abs(sum)
    49         2        516.0    258.0      6.8          P_value = erfc(S_N / math.sqrt(2))
    50         2         54.0     27.0      0.7          if P_value < 0 or P_value > 1:
    51                                                       raise ValueError('Error: P should be in range [0, 1]')
    52         2         15.0      7.5      0.2          return P_value
    53                                               except Exception as e:
    54                                                   print(f"Error: {e}")
    55                                                   raise

Total time: 0.0011979 s
File: c:\Users\micra\OneDrive\Рабочий стол\test\main.py
Function: similar_sequences_test at line 58

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    58                                           def similar_sequences_test(sequence: str) -> float:
    59                                               """
    60                                               Performs a test for the same consecutive bits.
    61                                               
    62                                               Parameters:
    63                                               The binary sequence to test.
    64                                               
    65                                               Returns:
    66                                               The P-value calculated by the statistical test.
    67                                               """
    68         2         26.0     13.0      0.2      try:
    69         2         39.0     19.5      0.3          N = len(sequence)
    70         2         18.0      9.0      0.2          sum = 0
    71       258       2219.0      8.6     18.5          for bit in sequence:
    72       256       2035.0      7.9     17.0              if bit == "1":
    73       120       1007.0      8.4      8.4                  sum += 1
    74         2         33.0     16.5      0.3          proportion_of_ones = sum / N
    75         2         84.0     42.0      0.7          if abs(proportion_of_ones - (0.5)) < 2 / math.sqrt(N):
    76         2         14.0      7.0      0.1              V_n = 0
    77       256       2211.0      8.6     18.5              for i in range(0, N - 1):
    78       254       2780.0     10.9     23.2                  if (sequence[i] != sequence[i + 1]):
    79       124        996.0      8.0      8.3                      V_n += 1
    80         4        289.0     72.2      2.4              P_value = erfc(
    81         4         96.0     24.0      0.8                  abs(V_n - 2 * N * proportion_of_ones * (1 - proportion_of_ones)) / (
    82         4         59.0     14.8      0.5                          2 * math.sqrt(2 * N) * proportion_of_ones * (
    83         2         15.0      7.5      0.1                          1 - proportion_of_ones)))
    84         2         42.0     21.0      0.4              if P_value < 0 or P_value > 1:
    85                                                           raise ValueError('Error: P should be in range [0, 1]')
    86         2         16.0      8.0      0.1              return P_value
    87                                                   else:
    88                                                       return 0
    89                                               except Exception as e:
    90                                                   print(f"Error: {e}")
    91                                                   raise

Total time: 0.0071525 s
File: c:\Users\micra\OneDrive\Рабочий стол\test\main.py
Function: longest_ones_sequence_test at line 94

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    94                                           def longest_ones_sequence_test(sequence: str):
    95                                               """
    96                                               Performs a test for the longest sequence of units in the block.
    97                                               
    98                                               Parameters:
    99                                               The binary sequence to test..
   100                                               
   101                                               Returns:
   102                                               The P-value calculated by the statistical test.
   103                                               """
   104         2         30.0     15.0      0.0      try:
   105         2         26.0     13.0      0.0          blocks = []
   106        34        413.0     12.1      0.6          for i in range(0, int(len(sequence) / M)):
   107        32        739.0     23.1      1.0              blocks.append(sequence[i * M: (i + 1) * M])
   108         2         33.0     16.5      0.0          V = [0, 0, 0, 0]
   109        34        395.0     11.6      0.6          for block in blocks:
   110        32        262.0      8.2      0.4              count = 0
   111        32        256.0      8.0      0.4              max_length = 0
   112       288       2787.0      9.7      3.9              for bit in block:
   113       256       2208.0      8.6      3.1                  if bit == "1":
   114       120       1001.0      8.3      1.4                      count += 1
   115       120       1581.0     13.2      2.2                      max_length = max(max_length, count)
   116                                                           else:
   117       136       1069.0      7.9      1.5                      count = 0
   118        32        233.0      7.3      0.3              match max_length:
   119        32        356.0     11.1      0.5                  case _ if max_length <= 1:
   120         6         82.0     13.7      0.1                      V[0] += 1
   121        26        245.0      9.4      0.3                  case 2:
   122        16        201.0     12.6      0.3                      V[1] += 1
   123        10        102.0     10.2      0.1                  case 3:
   124         4         68.0     17.0      0.1                      V[2] += 1
   125         6         70.0     11.7      0.1                  case _ if max_length >= 4:
   126         6         76.0     12.7      0.1                      V[3] += 1
   127         2         18.0      9.0      0.0          Xi_2 = 0
   128        10        152.0     15.2      0.2          for i in range(0, 4):
   129         8        388.0     48.5      0.5              Xi_2 += pow((V[i] - 16 * P_I[i]), 2) / (16 * P_I[i])
   130         2      57724.0  28862.0     80.7          P_value = gammainc(1.5, (Xi_2 / 2))
   131         2        997.0    498.5      1.4          if P_value < 0 or P_value > 1:
   132                                                       raise ValueError('Error: P should be in range [0, 1]')
   133         2         13.0      6.5      0.0          return P_value
   134                                               except Exception as e:
   135                                                   print(f"Error: {e}")
   136                                                   raise

Total time: 0.0142101 s
File: c:\Users\micra\OneDrive\Рабочий стол\test\main.py
Function: main at line 139

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   139                                           def main() -> None:
   140                                               """
   141                                               Main function for output of results.
   142                                               """
   143         1        284.0    284.0      0.2      absolute_path = os.path.abspath(os.getcwd())
   144         1       6129.0   6129.0      4.3      json_data = read_json_file(absolute_path + PATH)
   145         1         10.0     10.0      0.0      if json_data:
   146         1         27.0     27.0      0.0          cpp_sequence = json_data.get("cpp_generator", "")
   147         1         15.0     15.0      0.0          java_sequence = json_data.get("java_generator", "")
   148         1         11.0     11.0      0.0      if cpp_sequence and java_sequence:
   149         1       3248.0   3248.0      2.3          print("Tests for cpp_sequence:")
   150         1       9276.0   9276.0      6.5          print("Frequency bitwise test: P = " + str(frequency_bitwise_test(cpp_sequence)))
   151         1      13082.0  13082.0      9.2          print("Similar sequences test: P = " + str(similar_sequences_test(cpp_sequence)))
   152         1      46927.0  46927.0     33.0          print("Longest ones sequence test: P = " + str(longest_ones_sequence_test(cpp_sequence)))
   153         1       1767.0   1767.0      1.2          print("Tests for java_sequence:")
   154         1       8123.0   8123.0      5.7          print("Frequency bitwise test: P = " + str(frequency_bitwise_test(java_sequence)))
   155         1      12519.0  12519.0      8.8          print("Similar sequences test: P = " + str(similar_sequences_test(java_sequence)))
   156         1      40683.0  40683.0     28.6          print("Longest ones sequence test: P = " + str(longest_ones_sequence_test(java_sequence)))

